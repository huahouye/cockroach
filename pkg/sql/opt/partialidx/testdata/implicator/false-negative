# This file contains false negatives: filters that in theory prove implication
# of the corresponding predicates, but in practice the Implicator cannot prove.
#
# False negatives are acceptable because in the worst case, they lead to
# sub-optimal query plans. They prevent the optimizer from considering a scan
# over a partial index when it is theoretically guaranteed that the partial
# index contains the result rows.
#
# False positives are not acceptable because they could produce incorrect query
# results. A false positive would allow the optimizer to consider a scan over a
# partial index when it is not guaranteed that the partial index contains all
# result rows. The effect would be only returning a subset of all rows that
# should be returned.

predtest vars=(int, int)
@1 IN (1, 2, @2)
=>
@1 IN (1, 2) OR @1 = @2
----
false

predtest vars=(int, int)
@1 IN (1, 2, @2)
=>
@1 IN (1, 2) OR @2 = @1
----
false

predtest vars=(int, int)
@1 IN (1, 2) OR @2 = 20
=>
@1 = 1 OR @2 = 20 OR @1 = 2
----
false

predtest vars=(int, int)
1 IN (@1, @2)
=>
@1 = 1 OR @2 = 1
----
false

# To handle this case we'd have to create constraints at each AndExpr in the
# filter and check for containment, which would add complexity for a case which
# is unlikely to occur in the real-world.
predtest vars=(int, int)
@1 >= 2 AND @2 > 0
=>
(@1, @2) > (2, 0)
----
false
